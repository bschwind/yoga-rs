/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<6cc26b44e04e32c7570a13f1b2ec6917>>
 * generated by gentest/gentest-driver.ts from gentest/fixtures/YGAutoTest.html
 */

extern crate ordered_float;
extern crate yoga;
mod test_utils;

use yoga::*;

#[test]
fn test_auto_width() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_flex_direction(FlexDirection::Row);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Auto);
    root.set_height(StyleUnit::Point(50_f32.into()));

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_width(StyleUnit::Point(50_f32.into()));
    root_child0.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child0, 0);

    let mut root_child1 = Node::new_with_config(&mut config);
    root_child1.set_width(StyleUnit::Point(50_f32.into()));
    root_child1.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child1, 1);

    let mut root_child2 = Node::new_with_config(&mut config);
    root_child2.set_width(StyleUnit::Point(50_f32.into()));
    root_child2.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child2, 2);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(150_f32, root.get_layout_width());
    assert_eq!(50_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(50_f32, root_child0.get_layout_height());

    assert_eq!(50_f32, root_child1.get_layout_left());
    assert_eq!(0_f32, root_child1.get_layout_top());
    assert_eq!(50_f32, root_child1.get_layout_width());
    assert_eq!(50_f32, root_child1.get_layout_height());

    assert_eq!(100_f32, root_child2.get_layout_left());
    assert_eq!(0_f32, root_child2.get_layout_top());
    assert_eq!(50_f32, root_child2.get_layout_width());
    assert_eq!(50_f32, root_child2.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(150_f32, root.get_layout_width());
    assert_eq!(50_f32, root.get_layout_height());

    assert_eq!(100_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(50_f32, root_child0.get_layout_height());

    assert_eq!(50_f32, root_child1.get_layout_left());
    assert_eq!(0_f32, root_child1.get_layout_top());
    assert_eq!(50_f32, root_child1.get_layout_width());
    assert_eq!(50_f32, root_child1.get_layout_height());

    assert_eq!(0_f32, root_child2.get_layout_left());
    assert_eq!(0_f32, root_child2.get_layout_top());
    assert_eq!(50_f32, root_child2.get_layout_width());
    assert_eq!(50_f32, root_child2.get_layout_height());
}

#[test]
fn test_auto_height() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Point(50_f32.into()));
    root.set_height(StyleUnit::Auto);

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_width(StyleUnit::Point(50_f32.into()));
    root_child0.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child0, 0);

    let mut root_child1 = Node::new_with_config(&mut config);
    root_child1.set_width(StyleUnit::Point(50_f32.into()));
    root_child1.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child1, 1);

    let mut root_child2 = Node::new_with_config(&mut config);
    root_child2.set_width(StyleUnit::Point(50_f32.into()));
    root_child2.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child2, 2);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(150_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(50_f32, root_child0.get_layout_height());

    assert_eq!(0_f32, root_child1.get_layout_left());
    assert_eq!(50_f32, root_child1.get_layout_top());
    assert_eq!(50_f32, root_child1.get_layout_width());
    assert_eq!(50_f32, root_child1.get_layout_height());

    assert_eq!(0_f32, root_child2.get_layout_left());
    assert_eq!(100_f32, root_child2.get_layout_top());
    assert_eq!(50_f32, root_child2.get_layout_width());
    assert_eq!(50_f32, root_child2.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(150_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(50_f32, root_child0.get_layout_height());

    assert_eq!(0_f32, root_child1.get_layout_left());
    assert_eq!(50_f32, root_child1.get_layout_top());
    assert_eq!(50_f32, root_child1.get_layout_width());
    assert_eq!(50_f32, root_child1.get_layout_height());

    assert_eq!(0_f32, root_child2.get_layout_left());
    assert_eq!(100_f32, root_child2.get_layout_top());
    assert_eq!(50_f32, root_child2.get_layout_width());
    assert_eq!(50_f32, root_child2.get_layout_height());
}

#[test]
fn test_auto_flex_basis() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Point(50_f32.into()));

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_width(StyleUnit::Point(50_f32.into()));
    root_child0.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child0, 0);

    let mut root_child1 = Node::new_with_config(&mut config);
    root_child1.set_width(StyleUnit::Point(50_f32.into()));
    root_child1.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child1, 1);

    let mut root_child2 = Node::new_with_config(&mut config);
    root_child2.set_width(StyleUnit::Point(50_f32.into()));
    root_child2.set_height(StyleUnit::Point(50_f32.into()));
    root.insert_child(&mut root_child2, 2);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(150_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(50_f32, root_child0.get_layout_height());

    assert_eq!(0_f32, root_child1.get_layout_left());
    assert_eq!(50_f32, root_child1.get_layout_top());
    assert_eq!(50_f32, root_child1.get_layout_width());
    assert_eq!(50_f32, root_child1.get_layout_height());

    assert_eq!(0_f32, root_child2.get_layout_left());
    assert_eq!(100_f32, root_child2.get_layout_top());
    assert_eq!(50_f32, root_child2.get_layout_width());
    assert_eq!(50_f32, root_child2.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(150_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(50_f32, root_child0.get_layout_height());

    assert_eq!(0_f32, root_child1.get_layout_left());
    assert_eq!(50_f32, root_child1.get_layout_top());
    assert_eq!(50_f32, root_child1.get_layout_width());
    assert_eq!(50_f32, root_child1.get_layout_height());

    assert_eq!(0_f32, root_child2.get_layout_left());
    assert_eq!(100_f32, root_child2.get_layout_top());
    assert_eq!(50_f32, root_child2.get_layout_width());
    assert_eq!(50_f32, root_child2.get_layout_height());
}

#[test]
fn test_auto_position() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Point(50_f32.into()));
    root.set_height(StyleUnit::Point(50_f32.into()));

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_position(Edge::Right, StyleUnit::Auto);
    root_child0.set_width(StyleUnit::Point(25_f32.into()));
    root_child0.set_height(StyleUnit::Point(25_f32.into()));
    root.insert_child(&mut root_child0, 0);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(50_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(25_f32, root_child0.get_layout_width());
    assert_eq!(25_f32, root_child0.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(50_f32, root.get_layout_height());

    assert_eq!(25_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(25_f32, root_child0.get_layout_width());
    assert_eq!(25_f32, root_child0.get_layout_height());
}

#[test]
fn test_auto_margin() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Point(50_f32.into()));
    root.set_height(StyleUnit::Point(50_f32.into()));

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_margin(Edge::Left, StyleUnit::Auto);
    root_child0.set_width(StyleUnit::Point(25_f32.into()));
    root_child0.set_height(StyleUnit::Point(25_f32.into()));
    root.insert_child(&mut root_child0, 0);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(50_f32, root.get_layout_height());

    assert_eq!(25_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(25_f32, root_child0.get_layout_width());
    assert_eq!(25_f32, root_child0.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(50_f32, root.get_layout_width());
    assert_eq!(50_f32, root.get_layout_height());

    assert_eq!(25_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(25_f32, root_child0.get_layout_width());
    assert_eq!(25_f32, root_child0.get_layout_height());
}
