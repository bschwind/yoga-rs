/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<0d787969e19b15dae6d263772c84fd5d>>
 * generated by gentest/gentest-driver.ts from gentest/fixtures/YGAspectRatioTest.html
 */

extern crate ordered_float;
extern crate yoga;
mod test_utils;

use yoga::*;

#[test]
#[ignore]
fn test_aspect_ratio_does_not_stretch_cross_axis_dim() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Point(300_f32.into()));
    root.set_height(StyleUnit::Point(300_f32.into()));

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_overflow(Overflow::Scroll);
    root_child0.set_flex_grow(1_f32);
    root_child0.set_flex_shrink(1_f32);
    root_child0.set_flex_basis(StyleUnit::Percent(0_f32.into()));
    root.insert_child(&mut root_child0, 0);

    let mut root_child0_child0 = Node::new_with_config(&mut config);
    root_child0_child0.set_flex_direction(FlexDirection::Row);
    root_child0.insert_child(&mut root_child0_child0, 0);

    let mut root_child0_child0_child0 = Node::new_with_config(&mut config);
    root_child0_child0_child0.set_flex_grow(2_f32);
    root_child0_child0_child0.set_flex_shrink(1_f32);
    root_child0_child0_child0.set_flex_basis(StyleUnit::Percent(0_f32.into()));
    root_child0_child0_child0.set_aspect_ratio(1_f32 / 1_f32);
    root_child0_child0.insert_child(&mut root_child0_child0_child0, 0);

    let mut root_child0_child0_child1 = Node::new_with_config(&mut config);
    root_child0_child0_child1.set_width(StyleUnit::Point(5_f32.into()));
    root_child0_child0.insert_child(&mut root_child0_child0_child1, 1);

    let mut root_child0_child0_child2 = Node::new_with_config(&mut config);
    root_child0_child0_child2.set_flex_grow(1_f32);
    root_child0_child0_child2.set_flex_shrink(1_f32);
    root_child0_child0_child2.set_flex_basis(StyleUnit::Percent(0_f32.into()));
    root_child0_child0.insert_child(&mut root_child0_child0_child2, 2);

    let mut root_child0_child0_child2_child0 = Node::new_with_config(&mut config);
    root_child0_child0_child2_child0.set_flex_grow(1_f32);
    root_child0_child0_child2_child0.set_flex_shrink(1_f32);
    root_child0_child0_child2_child0.set_flex_basis(StyleUnit::Percent(0_f32.into()));
    root_child0_child0_child2_child0.set_aspect_ratio(1_f32 / 1_f32);
    root_child0_child0_child2.insert_child(&mut root_child0_child0_child2_child0, 0);

    let mut root_child0_child0_child2_child0_child0 = Node::new_with_config(&mut config);
    root_child0_child0_child2_child0_child0.set_width(StyleUnit::Point(5_f32.into()));
    root_child0_child0_child2_child0.insert_child(&mut root_child0_child0_child2_child0_child0, 0);

    let mut root_child0_child0_child2_child0_child1 = Node::new_with_config(&mut config);
    root_child0_child0_child2_child0_child1.set_flex_grow(1_f32);
    root_child0_child0_child2_child0_child1.set_flex_shrink(1_f32);
    root_child0_child0_child2_child0_child1.set_flex_basis(StyleUnit::Percent(0_f32.into()));
    root_child0_child0_child2_child0_child1.set_aspect_ratio(1_f32 / 1_f32);
    root_child0_child0_child2_child0.insert_child(&mut root_child0_child0_child2_child0_child1, 1);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(300_f32, root.get_layout_width());
    assert_eq!(300_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(300_f32, root_child0.get_layout_width());
    assert_eq!(300_f32, root_child0.get_layout_height());

    assert_eq!(0_f32, root_child0_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0.get_layout_top());
    assert_eq!(300_f32, root_child0_child0.get_layout_width());
    assert_eq!(197_f32, root_child0_child0.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child0.get_layout_top());
    assert_eq!(197_f32, root_child0_child0_child0.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child0.get_layout_height());

    assert_eq!(197_f32, root_child0_child0_child1.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child1.get_layout_top());
    assert_eq!(5_f32, root_child0_child0_child1.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child1.get_layout_height());

    assert_eq!(202_f32, root_child0_child0_child2.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2.get_layout_top());
    assert_eq!(98_f32, root_child0_child0_child2.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child2.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child2_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2_child0.get_layout_top());
    assert_eq!(98_f32, root_child0_child0_child2_child0.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child2_child0.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child2_child0_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2_child0_child0.get_layout_top());
    assert_eq!(5_f32, root_child0_child0_child2_child0_child0.get_layout_width());
    assert_eq!(0_f32, root_child0_child0_child2_child0_child0.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child2_child0_child1.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2_child0_child1.get_layout_top());
    assert_eq!(98_f32, root_child0_child0_child2_child0_child1.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child2_child0_child1.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(300_f32, root.get_layout_width());
    assert_eq!(300_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(300_f32, root_child0.get_layout_width());
    assert_eq!(300_f32, root_child0.get_layout_height());

    assert_eq!(0_f32, root_child0_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0.get_layout_top());
    assert_eq!(300_f32, root_child0_child0.get_layout_width());
    assert_eq!(197_f32, root_child0_child0.get_layout_height());

    assert_eq!(103_f32, root_child0_child0_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child0.get_layout_top());
    assert_eq!(197_f32, root_child0_child0_child0.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child0.get_layout_height());

    assert_eq!(98_f32, root_child0_child0_child1.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child1.get_layout_top());
    assert_eq!(5_f32, root_child0_child0_child1.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child1.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child2.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2.get_layout_top());
    assert_eq!(98_f32, root_child0_child0_child2.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child2.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child2_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2_child0.get_layout_top());
    assert_eq!(98_f32, root_child0_child0_child2_child0.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child2_child0.get_layout_height());

    assert_eq!(93_f32, root_child0_child0_child2_child0_child0.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2_child0_child0.get_layout_top());
    assert_eq!(5_f32, root_child0_child0_child2_child0_child0.get_layout_width());
    assert_eq!(0_f32, root_child0_child0_child2_child0_child0.get_layout_height());

    assert_eq!(0_f32, root_child0_child0_child2_child0_child1.get_layout_left());
    assert_eq!(0_f32, root_child0_child0_child2_child0_child1.get_layout_top());
    assert_eq!(98_f32, root_child0_child0_child2_child0_child1.get_layout_width());
    assert_eq!(197_f32, root_child0_child0_child2_child0_child1.get_layout_height());
}

#[test]
fn test_zero_aspect_ratio_behaves_like_auto() {
    let mut config = Config::new();

    let mut root = Node::new_with_config(&mut config);
    root.set_position_type(PositionType::Absolute);
    root.set_width(StyleUnit::Point(300_f32.into()));
    root.set_height(StyleUnit::Point(300_f32.into()));

    let mut root_child0 = Node::new_with_config(&mut config);
    root_child0.set_width(StyleUnit::Point(50_f32.into()));
    root_child0.set_aspect_ratio(0_f32 / 1_f32);
    root.insert_child(&mut root_child0, 0);
    root.calculate_layout(Undefined, Undefined, Direction::LTR);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(300_f32, root.get_layout_width());
    assert_eq!(300_f32, root.get_layout_height());

    assert_eq!(0_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(0_f32, root_child0.get_layout_height());

    root.calculate_layout(Undefined, Undefined, Direction::RTL);

    assert_eq!(0_f32, root.get_layout_left());
    assert_eq!(0_f32, root.get_layout_top());
    assert_eq!(300_f32, root.get_layout_width());
    assert_eq!(300_f32, root.get_layout_height());

    assert_eq!(250_f32, root_child0.get_layout_left());
    assert_eq!(0_f32, root_child0.get_layout_top());
    assert_eq!(50_f32, root_child0.get_layout_width());
    assert_eq!(0_f32, root_child0.get_layout_height());
}
